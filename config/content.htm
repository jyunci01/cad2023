<h1>About</h1>
<p><a href="https://jyunci01.github.io/cad2023">https://jyunci01.github.io/cad2023</a></p>
<p></p>
<p><a href="https://s1511.cycu.org/~cad41123105/cad2023" title="https://s1511.cycu.org/~cad41123105/cad2023">https://s1511.cycu.org/~cad41123105/cad2023</a></p>
<h1>專案一</h1>
<h3>設計繪圖</h3>
<p><img alt="" height="191" src="/images/組合圖.png" width="411"/></p>
<p>模擬影片</p>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 以下的 zmq 程式庫已經過修改, 可以在 IPv4 與 IPv6 環境下使用
# 針對 CoppeliaSim 的 zmq 延伸程式, Python 需要安裝 cbor 與 pyzmq 等兩個模組
# pip install cbor pyzmq
from zmqRemoteApi_IPv6 import RemoteAPIClient
# 由於在 zmq 程式執行時, 希望讓使用者可以透過鍵盤 (或其他電子電機訊號) 指令控制遠端的機電模擬場景
# Python 程式環境還需要安裝 keyboard 模組, pip install keyboard
import keyboard

# 利用以下程式碼連接 CoppeliaSim remote API server
#第一個輸入變數若為 localhost 則只能控制與程式同在的場景
# 但若第一輸入變數為可連外的 IPv4 或 IPv6 address, 則可用來控制遠端電腦上的模擬場景
# 23000 為 CoppeliaSim 使用 ZMQ remote API 連線控制時內定的網路埠號
# client 與 server 的防火牆或代理主機必須讓此埠號的封包 (socket) 通過
client = RemoteAPIClient('localhost', 23000)

# 利用 getObject 取得場景中的 "sim" 物件參考對應值
sim = client.getObject('sim')

# 利用 sim 物件的 startSimulation() 方法啟動場景模擬
sim.startSimulation()

# 利用 getObject 取得 'marble' and 'sensor'  物件的參考對應值
marble = sim.getObject('./marble')
sensor = sim.getObject('./sensor')

# 透過變數屬性設定方法將 marble 設為 non-static, 意即具有 dynamic 特性
sim.setObjectInt32Param(marble, sim.shapeintparam_static, 0)

# 主模擬程序
while True:
    if keyboard.is_pressed('q'):
        # 模擬執行期間, 將滑鼠停在場景, 鍵盤按下 q 可以終止模擬
        break

    r, dist, pt, obj, normal = sim.handleProximitySensor(sensor)
    res, dist2, point, obj2, n = sim.readProximitySensor(sensor)
    # Get the current position of the marble
    current_position1 = sim.getObjectPosition(marble, -1)
    current_position2 = sim.getObjectPosition(marble, -1)

   
    # 當鋼球碰觸感測器時
    if res &gt; 0:
        if current_position1[0] &lt; 1:
            # 對鋼球質心施以一個向量力
            sim.addForceAndTorque(marble, [-1000, 0,-100], [0, 0, 0])

# Stop the simulation
sim.stopSimulation()</pre>
<p><br/><br/></p>
<p><br/><br/></p>
<p><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/cmsimde/static" data-varname="winkVideoData_creo10" height="630" muted="true" width="1008">
<source src="./../downloads/CoppeliaSim%20Edu%20-%20ttt%20-%20rendering_%201%20ms%20(7.94%20fps)%20-%20SIMULATION%20STOPPED%202024-01-05%2016-34-55.mp4" type="video/mp4"/></video></p>
<p><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/cmsimde/static" data-varname="winkVideoData_creo10" height="630" muted="true" width="1008">
<source src="./../downloads/CoppeliaSim%20Edu%20-%20�ϤO�y�y%20-%20rendering_%203%20ms%20(7.94%20fps)%20-%20SIMULATION%20STOPPED%202023-11-10%2013-41-56.mp4" type="video/mp4"/></video></p>
<h3>尺寸設計</h3>
<h4>底板洞尺寸</h4>
<p><img alt="" height="192" src="/images/底板洞.png" width="415"/></p>
<h4>柱子</h4>
<p><img alt="" height="195" src="/images/柱子.png" width="420"/></p>
<h4>盤子</h4>
<p><img alt="" height="199" src="/images/盤子.png" width="429"/></p>
<h4>盤子洞尺寸</h4>
<p><img alt="" height="198" src="/images/盤子洞.png" width="430"/></p>
<h4>球(<span>Φ</span>9.50mm)</h4>
<p><img alt="" height="202" src="/images/求.png" width="434"/></p>
<h4>滑軌尺寸</h4>
<p><img alt="" height="202" src="/images/滑軌.png" width="437"/></p>
<h1>專案二</h1>
<h2>組合</h2>
<p><img alt="" height="388" src="/images/平衡組合圖.png" width="433"/></p>
<p><img alt="" height="353" src="/images/仔入照片.png" width="430"/></p>
<h2>尺寸設計</h2>
<p>軸(15*5*3)</p>
<p><img alt="" height="360" src="/images/9軸.png" width="434"/></p>
<p>軸(22.1*5*5)</p>
<p><img alt="" height="408" src="/images/16軸.png" width="393"/></p>
<p>軸(44.1*5*5)</p>
<p><img alt="" height="493" src="/images/44軸.png" width="395"/></p>
<p>平台</p>
<p><img alt="" height="219" src="/images/上面.png" width="506"/></p>
<p>底板(52.02*52.02*5)</p>
<p><img alt="" height="337" src="/images/底板.png" width="479"/></p>
<p>底板柱</p>
<p><img alt="" height="406" src="/images/底板柱.png" width="484"/></p>
<h2>模擬</h2>
<p>先將圖匯入CoppeliaSim裡，打開程式確定會跟場景互動</p>
<p><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/cmsimde/static" data-varname="winkVideoData_creo10" height="630" muted="true" width="1008">
<source src="./../downloads/平衡球1.mp4" type="video/mp4"/></video></p><h1>w15</h1>
<p>設計繪圖</p>
<p><img alt="" height="263" src="/images/模擬畫面.png" width="405"/></p>
<p>底板</p>
<p><img alt="" height="310" src="/images/底板球球.png" width="402"/></p>
<p>軌道</p>
<p><img alt="" height="361" src="/images/軌道22.png" width="404"/></p>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 以下的 zmq 程式庫已經過修改, 可以在 IPv4 與 IPv6 環境下使用
# 針對 CoppeliaSim 的 zmq 延伸程式, Python 需要安裝 cbor 與 pyzmq 等兩個模組
# pip install cbor pyzmq
from zmqRemoteApi_IPv6 import RemoteAPIClient
# 由於在 zmq 程式執行時, 希望讓使用者可以透過鍵盤 (或其他電子電機訊號) 指令控制遠端的機電模擬場景
# Python 程式環境還需要安裝 keyboard 模組, pip install keyboard
import keyboard

# 利用以下程式碼連接 CoppeliaSim remote API server
#第一個輸入變數若為 localhost 則只能控制與程式同在的場景
# 但若第一輸入變數為可連外的 IPv4 或 IPv6 address, 則可用來控制遠端電腦上的模擬場景
# 23000 為 CoppeliaSim 使用 ZMQ remote API 連線控制時內定的網路埠號
# client 與 server 的防火牆或代理主機必須讓此埠號的封包 (socket) 通過
client = RemoteAPIClient('localhost', 23000)

# 利用 getObject 取得場景中的 "sim" 物件參考對應值
sim = client.getObject('sim')

# 利用 sim 物件的 startSimulation() 方法啟動場景模擬
sim.startSimulation()

# 利用 getObject 取得 'marble' and 'sensor'  物件的參考對應值
marble = sim.getObject('./marble')
sensor = sim.getObject('./sensor')

# 透過變數屬性設定方法將 marble 設為 non-static, 意即具有 dynamic 特性
sim.setObjectInt32Param(marble, sim.shapeintparam_static, 0)

# 主模擬程序
while True:
    if keyboard.is_pressed('q'):
        # 模擬執行期間, 將滑鼠停在場景, 鍵盤按下 q 可以終止模擬
        break

    r, dist, pt, obj, normal = sim.handleProximitySensor(sensor)
    res, dist2, point, obj2, n = sim.readProximitySensor(sensor)
    # Get the current position of the marble
    current_position1 = sim.getObjectPosition(marble, -1)
    current_position2 = sim.getObjectPosition(marble, -1)

    # 當鋼球碰觸感測器時
    if res &gt; 0:
        if current_position1[0] &lt; current_position2[0]:
            # 對鋼球質心施以一個向量力
            sim.addForceAndTorque(marble, [50, 0, -20], [0, 0, 0])

# Stop the simulation
sim.stopSimulation()</pre>
<p></p>
<p></p>
<p><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/cmsimde/static" data-varname="winkVideoData_creo10" height="630" muted="true" width="1008">
<source src="./../downloads/圈球333.mp4" type="video/mp4"/></video></p>
<h1>考試</h1>
<p><img alt="" height="212" src="/images/考試成績.png" width="415"/></p>
<h1>自評</h1>
<p><span>倉儲與網站評分項目:</span></p>
<p><span>A: 是否<span>按照進度明確標示倉儲的改版歷程</span></span></p>
<p>是</p>
<p><span>B: 是否根據<span> </span><span>IPv4 與 IPv6</span><span> </span>網路環境設定進行作法討論</span></p>
<p><span></span></p>
<p><span>C: 是否就<span><span> </span>Replit、s.cycu.org 與 localhost</span><span> </span>情境下對個人與分組倉儲進行設定操作</span></p>
<p><span></span> 是</p>
<p><span>D: 是否就所分配的<span> </span><span>CAD 套件</span>從安裝設定到繪圖提供內容參考</span></p>
<p><span></span></p>
<p><span>E: 是否使用所分配的 CAD 套件完成<span>專案一零組件繪圖</span>, 並提供零組件下載</span></p>
<p><span></span></p>
<p><span>F: 是否將自行繪製的專案一零組件<span>轉入 CoppeliaSim</span></span></p>
<p>是</p>
<p><span>G: 是否利用<span> </span><span>ZMQ Remote API Python</span><span> </span>對專案一轉入的零組件設定感測器, 並進行<span>鋼球永動模擬</span></span></p>
<p>是</p>
<p><span>H: 是否實際操作<span> </span><span>Triangle 軌道系統</span>的鋼球永動模擬</span></p>
<p><span></span>是</p>
<p><span>I: 是否完成 W15 的平面雙 U 迴路上的<span>鋼球永動系統繪圖、轉檔與系統模擬</span></span></p>
<p>有畫圖，但還在用程式</p>
<p><span>J: 是否使用所分配的 CAD 套件完成<span>專案二 1D 平台零組件繪圖</span>, 並提供零組件下載</span></p>
<p><span></span>是</p>
<p><span>K: 是否利用<span> </span><span>ZMQ Remote API Python</span><span> </span>對專案二轉入的零組件設定感測器, 並進行鋼球永動模擬</span></p>
<p><span></span>是</p>
<p><span>L: 是否針對專案二的 1D 平台鋼球平衡系統所需的<span> </span><span>PID 控制理論</span>進行資料收集與 ChatGPT 對答</span></p>
<p><span></span>是</p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>